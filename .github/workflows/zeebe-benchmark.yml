name: Zeebe Benchmark
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Specifies the name of the benchmark'
        required: true
      ref:
        description: 'Specifies the ref (e.g. main or a commit sha) to benchmark'
        default: 'main'
        required: false
      cluster:
        description: 'Specifies which cluster to deploy the benchmark on'
        default: 'zeebe-cluster'
        required: false
      cluster-region:
        description: 'Specifies the cluster region. Needed to retrieve cluster credentials'
        default: europe-west1-b
        required: false
      benchmark-load:
        description: 'Specifies which benchmark components to deploy. `starter`, `timer` and `publisher` can be assigned with the rate at which they publish. Allows arbitrary helm arguments, like --set starter.rate=100'
        required: false
      publish:
        description: 'Where to publish the results, can be "slack" or "comment"'
        default: ""
        type: string
        required: false
      measure:
        description: 'Measure impact of network latency'
        type: boolean
        required: false
        default: true
      stable-vms:
        description: 'Deploy to non-spot VMs'
        type: boolean
        required: false
        default: false
      operate-tag:
        description: 'Specifies the tag of operate, when Operate should be included in the Benchmark'
        type: string
        default: ""
        required: false
  workflow_call:
    inputs:
      name:
        description: 'Specifies the name of the benchmark'
        type: string
        required: true
      ref:
        description: 'Specifies the ref (e.g. main or a commit sha) to benchmark'
        default: 'main'
        type: string
        required: false
      cluster:
        description: 'Specifies which cluster to deploy the benchmark on'
        default: 'zeebe-cluster'
        type: string
        required: false
      cluster-region:
        description: 'Specifies the cluster region. Needed to retrieve cluster credentials'
        default: europe-west1-b
        type: string
        required: false
      benchmark-load:
        description: 'Specifies which benchmark components to deploy. `starter`, `timer` and `publisher` can be assigned with the rate at which they publish. Allows arbitrary helm arguments, like --set starter.rate=100'
        type: string
        required: false
      measure:
        description: 'Measure impact of network latency'
        type: boolean
        required: false
        default: true
      publish:
        description: 'Where to publish the results, can be "slack" or "comment"'
        default: ""
        type: string
        required: false
      stable-vms:
        description: 'Deploy to non-spot VMs'
        type: boolean
        required: false
        default: false
      operate-tag:
        description: 'Specifies the tag of operate, when Operate should be included in the Benchmark'
        type: string
        default: ""
        required: false
jobs:
  build-zeebe-image:
    name: Build Zeebe
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image-tag: ${{ steps.image-tag.outputs.image-tag }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/628707732411/locations/global/workloadIdentityPools/zeebe-gh-actions/providers/gha-provider'
          service_account: 'zeebe-gh-actions@zeebe-io.iam.gserviceaccount.com'
      - name: Get image tag
        id: image-tag
        run: |
          echo "image-tag=${{ inputs.name }}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Setup BuildKit
        uses: docker/setup-buildx-action@v3
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          tags: gcr.io/zeebe-io/zeebe:${{ steps.image-tag.outputs.image-tag }}
          push: true
          cache-from: type=gha,ignore-error=true
          cache-to: type=gha,mode=max,ignore-error=true
          build-args: DIST=build
          provenance: false
          target: app
  build-operate-image:
    name: Build + Push Operate Docker image
    if: ${{ inputs.operate-tag != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      # See https://github.com/marketplace/actions/authenticate-to-google-cloud#setup
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/628707732411/locations/global/workloadIdentityPools/zeebe-gh-actions/providers/gha-provider'
          service_account: 'zeebe-gh-actions@zeebe-io.iam.gserviceaccount.com'
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/github.com/organizations/camunda NEXUS_USR;
            secret/data/github.com/organizations/camunda NEXUS_PSW;
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "21"
          cache: "maven"
      # Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
      - name: 'Create settings.xml'
        uses: s4u/maven-settings-action@v3.0.0
        with:
          githubServer: false
          servers: |
           [{
              "id": "camunda-nexus",
              "username": "${{ steps.secrets.outputs.NEXUS_USR }}",
              "password": "${{ steps.secrets.outputs.NEXUS_PSW }}"
            }]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "*", "name": "camunda Nexus"}]'
      - name: Build backend
        run: mvn clean install -DskipChecks -P -docker,skipFrontendBuild -DskipTests=true -B -DskipRemoteStaging=true -Dmaven.deploy.skip=true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push to Zeebe gcr.io registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: gcr.io/zeebe-io/operate:${{ inputs.operate-tag }}
          cache-from: type=gha,ignore-error=true
          cache-to: type=gha,mode=max,ignore-error=true
          file: operate.Dockerfile

  build-benchmark-images:
    name: Build Starter and Worker
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      image-tag: ${{ steps.image-tag.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/628707732411/locations/global/workloadIdentityPools/zeebe-gh-actions/providers/gha-provider'
          service_account: 'zeebe-gh-actions@zeebe-io.iam.gserviceaccount.com'
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - name: Get image tag
        id: image-tag
        run: |
          echo "image-tag=${{ inputs.name }}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - run: ./mvnw -B -D skipTests -D skipChecks -pl zeebe/benchmarks/project -am install
      - name: Build Starter Image
        run: ./mvnw -pl zeebe/benchmarks/project jib:build -P starter -D image="gcr.io/zeebe-io/starter:${{ steps.image-tag.outputs.image-tag }}"
      - name: Build Worker Image
        run: ./mvnw -pl zeebe/benchmarks/project jib:build -P worker -D image="gcr.io/zeebe-io/worker:${{ steps.image-tag.outputs.image-tag }}"
  deploy-benchmark-measurement:
    name: Measure
    needs:
      - build-zeebe-image
      - build-benchmark-images
    uses: zeebe-io/zeebe-performance-test/.github/workflows/measure.yaml@main
    secrets: inherit
    if: inputs.measure
    with:
      name: measurement-${{ github.run_id }}
      chaos: network-latency-5
      publish: ${{ inputs.publish }}
      helm-arguments: >
        --set global.image.tag=${{ needs.build-benchmark-images.outputs.image-tag }}
        --set camunda-platform.zeebe.image.repository=gcr.io/zeebe-io/zeebe
        --set camunda-platform.zeebe.image.tag=${{ needs.build-zeebe-image.outputs.image-tag }}
        --set camunda-platform.zeebe-gateway.image.repository=gcr.io/zeebe-io/zeebe
        --set camunda-platform.zeebe-gateway.image.tag=${{ needs.build-zeebe-image.outputs.image-tag }}
        ${{ inputs.benchmark-load }}
  deploy-benchmark-cluster:
    name: Deploy
    needs:
      - build-zeebe-image
      - build-benchmark-images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/628707732411/locations/global/workloadIdentityPools/zeebe-gh-actions/providers/gha-provider'
          service_account: 'zeebe-gh-actions@zeebe-io.iam.gserviceaccount.com'
      - uses: google-github-actions/get-gke-credentials@v2.2.0
        with:
          cluster_name: ${{ inputs.cluster }}
          location: ${{ inputs.cluster-region }}
      - name: Add camunda helm repo
        run: |
          helm repo add zeebe-benchmark https://zeebe-io.github.io/benchmark-helm
          helm repo update

      - name: Find previous Helm chart release version
        id: find-chart-release
        run: |
          echo "chart-release=$(helm get metadata -o json --namespace ${{ inputs.name }} ${{ inputs.name }} | jq --raw-output .version)" >> $GITHUB_OUTPUT
      - name: Helm install
        run: >
          helm upgrade --install ${{ inputs.name }} zeebe-benchmark/zeebe-benchmark
          --namespace ${{ inputs.name }}
          --create-namespace
          --reuse-values
          --set global.image.tag=${{ needs.build-benchmark-images.outputs.image-tag }}
          --set camunda-platform.zeebe.image.repository=gcr.io/zeebe-io/zeebe
          --set camunda-platform.zeebe.image.tag=${{ needs.build-zeebe-image.outputs.image-tag }}
          --set camunda-platform.zeebe-gateway.image.repository=gcr.io/zeebe-io/zeebe
          --set camunda-platform.zeebe-gateway.image.tag=${{ needs.build-zeebe-image.outputs.image-tag }}
          ${{ steps.find-chart-release.outputs.chart-release != '' && format('--version {0}', steps.find-chart-release.outputs.chart-release) || '' }}
          ${{ inputs.stable-vms && '-f zeebe/benchmarks/setup/default/values-stable.yaml' || '' }}
          ${{ inputs.benchmark-load }}
      - name: Summarize deployment
        if: success()
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
            ## Benchmark \`${{ inputs.name }}\` values
            \`\`\`yaml
            $(helm get values ${{ inputs.name }} -n ${{ inputs.name }})
            \`\`\`
          EOF
